def addSameSize(h1,h2,carry):
    if not h1:
        return
    
    sm=0
    
    #allocating memory for sum node of current two nodes.
    result=Node(sm)
    
    #recursively adding remaining nodes and getting the carry.
    result.next=addSameSize(h1.next,h2.next,carry)
    
    #adding digits of current nodes and propagating carry.
    sm=h1.data+h2.data+carry.data
    carry.data=sm//10
    sm=sm%10
    
    #assigning the sum to current node of resultant list.
    result.data=sm
    
    return result
    
    

#This function is called after the smaller list is added to the sublist of 
#bigger list of same size. Once the right sublist is added, the carry
#must be added to left side of larger list to get the final result.
def addCarryToRemaining(h1,curr,result,carry):
    
    if h1!=curr:
        #calling function recursively to add carry.
        addCarryToRemaining(h1.next,curr,result,carry)
        
        sm=h1.data+carry.data
        carry.data=sm//10
        sm=sm%10
        
        #adding this node to the front of the resultant list.
        result.head=push(result.head,sm)
    
    return



 def removeLoop(self, head):
        slow = head
        fast = head 
        
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            
            if slow == fast:
                break
        if slow != fast:
            return head
        
        if fast == head and slow == head:
            while fast.next != head:
                fast = fast.next
            fast.next = None
            return head
        
        slow = head
        while slow.next != fast.next:
            slow = slow.next
            fast = fast.next
        fast.next = None
        return head


def getSize(head):
    ret = 0
    while head is not None:
        head = head.next
        ret+=1
    return ret

#Function to find intersection point in Y shaped Linked Lists.
def intersetPoint(head1,head2):
    
    #finding length of list1.
    n1 = getSize(head1)
    
    #finding length of list2.
    n2 = getSize(head2)
    
    #if list1 is longer, we ignore some of its starting
    #elements till it has as many elements as list2.
    while n1>n2:
        head1 = head1.next
        n1-=1
    
    #similarly, if list2 is longer, we ignore some of its starting
    #elements till it has as many elements as list1.
    while n2>n1:
        head2 = head2.next
        n2-=1
    
    
    #now we simply traverse ahead till we get the intersection point, if there 
    #is none, this loop will break when both pointers point at NULL.
    while head1 != head2:
        head1 = head1.next
        head2 = head2.next

    # if head1 is not NULL, we return its data otherwise we return -1.
    if head1 is not None:
        return head1.data
    return -1



#reverse in groups
class Node:
    def __init__(self, k):
        self.key = k
        self.next = None

def printList(head):
    curr = head
    while curr != None:
        print(curr.key, end=" ")
        curr = curr.next
    print()

def iteRevK(head,k):
    curr = head
    prev_first = head
    first_pass = True
    while curr!= None :
        first, prev = None, None
        count = 0 
        while curr!= None and count<k :
            next = curr.next
            curr.next = prev
            prev = curr
            curr = next
            count+=1
        if(first_pass):
            head = prev
            first_pass = False
        else:
            prev_first.next = prev
            prev_first=first
    return head
