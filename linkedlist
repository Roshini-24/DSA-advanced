def addSameSize(h1,h2,carry):
    if not h1:
        return
    
    sm=0
    
    #allocating memory for sum node of current two nodes.
    result=Node(sm)
    
    #recursively adding remaining nodes and getting the carry.
    result.next=addSameSize(h1.next,h2.next,carry)
    
    #adding digits of current nodes and propagating carry.
    sm=h1.data+h2.data+carry.data
    carry.data=sm//10
    sm=sm%10
    
    #assigning the sum to current node of resultant list.
    result.data=sm
    
    return result
    
    

#This function is called after the smaller list is added to the sublist of 
#bigger list of same size. Once the right sublist is added, the carry
#must be added to left side of larger list to get the final result.
def addCarryToRemaining(h1,curr,result,carry):
    
    if h1!=curr:
        #calling function recursively to add carry.
        addCarryToRemaining(h1.next,curr,result,carry)
        
        sm=h1.data+carry.data
        carry.data=sm//10
        sm=sm%10
        
        #adding this node to the front of the resultant list.
        result.head=push(result.head,sm)
    
    return



 def removeLoop(self, head):
        slow = head
        fast = head 
        
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            
            if slow == fast:
                break
        if slow != fast:
            return head
        
        if fast == head and slow == head:
            while fast.next != head:
                fast = fast.next
            fast.next = None
            return head
        
        slow = head
        while slow.next != fast.next:
            slow = slow.next
            fast = fast.next
        fast.next = None
        return head


def getSize(head):
    ret = 0
    while head is not None:
        head = head.next
        ret+=1
    return ret

#Function to find intersection point in Y shaped Linked Lists.
def intersetPoint(head1,head2):
    
    #finding length of list1.
    n1 = getSize(head1)
    
    #finding length of list2.
    n2 = getSize(head2)
    
    #if list1 is longer, we ignore some of its starting
    #elements till it has as many elements as list2.
    while n1>n2:
        head1 = head1.next
        n1-=1
    
    #similarly, if list2 is longer, we ignore some of its starting
    #elements till it has as many elements as list1.
    while n2>n1:
        head2 = head2.next
        n2-=1
    
    
    #now we simply traverse ahead till we get the intersection point, if there 
    #is none, this loop will break when both pointers point at NULL.
    while head1 != head2:
        head1 = head1.next
        head2 = head2.next

    # if head1 is not NULL, we return its data otherwise we return -1.
    if head1 is not None:
        return head1.data
    return -1



#reverse in groups
class Node:
    def __init__(self, k):
        self.key = k
        self.next = None

def printList(head):
    curr = head
    while curr != None:
        print(curr.key, end=" ")
        curr = curr.next
    print()

def iteRevK(head,k):
    curr = head
    prev_first = head
    first_pass = True
    while curr!= None :
        first, prev = None, None
        count = 0 
        while curr!= None and count<k :
            next = curr.next
            curr.next = prev
            prev = curr
            curr = next
            count+=1
        if(first_pass):
            head = prev
            first_pass = False
        else:
            prev_first.next = prev
            prev_first=first
    return head


#loop
def detectLoop(self):
		slow_p = self.head
		fast_p = self.head
		while(slow_p and fast_p and fast_p.next):
			slow_p = slow_p.next
			fast_p = fast_p.next.next
			if slow_p == fast_p:
				return 1
		return 0


#detectand remove loop
def detectRemoveLoop(head):
    slow = head
    fast = head
    while fast != None and fast.next!=None:
        slow=slow.next
        fast=fast.next.next
        if slow==fast:
            break
    if slow!=fast:
        return
    slow = head
    while slow.next!= fast.next:
        slow=slow.next
        fast=fast.next
    fast.next=None


#intersection
def getIntersection(head1,head2):
    s = set()
    curr = head1
    while curr!=None:
        s.add(curr)
        curr=curr.next
    curr=head2
    while curr!=None:
        if curr in s:
            return curr.data
        curr=curr.next
    return -1



def segregateEvenOdd():

	global head
	end = head
	prev = None
	curr = head

	while (end.next != None):
		end = end.next

	new_end = end

	while (curr.data % 2 !=0 and curr != end):
		
		new_end.next = curr
		curr = curr.next
		new_end.next.next = None
		new_end = new_end.next
		
	if (curr.data % 2 == 0):
		
		head = curr

		while (curr != end):
			
			if (curr.data % 2 == 0):
				
				prev = curr
				curr = curr.next
				
			else:
				
				prev.next = curr.next

				curr.next = None

				new_end.next = curr

				new_end = curr

				curr = prev.next
			
	else:
		prev = curr

	if (new_end != end and end.data % 2 != 0):
		
		prev.next = end.next
		end.next = None
		new_end.next = end


def pairwiseSwap(head):
    if head == None or head.next== None:
        return head
    curr = head.next.next
    prev = head
    head = head.next
    head.next = prev
    while curr!= None and curr.next!= None:
        prev.next = curr.next
        prev = curr
        next = curr.next.next
        curr.next.next = curr
        curr = next
    prev.next = curr
    return head


def clone(head):
    d={None : None}
    curr = head
    while curr!= None :
        d[curr] = Node(curr.data)
        curr = curr.next
    curr = head
    while curr != None :
        d[curr].next=d[curr.next]
        d[curr].random = d[curr.random]
        curr = curr.next
    return d[head]



def sortedMerge(a, b):
    if(a == None):
        return b
    if(b == None):
        return a
    head = None
    tail = None
    if(a.data <= b.data):
        head = tail = a
        a = a.next
    else:
        head = tail = b
        b = b.next
        
    while(a != None and b != None):
        if(a.data <= b.data):
            tail.next = a
            tail = a
            a = a.next
        else:
            tail.next = b
            tail = b
            b = b.next

    if(a == None):
        tail.next = b
    else:
        tail.next = a
    return head


#palindrome
def reverseList(head):
    prev = None
    while head:
        curr = head
        head = head.next
        curr.next = prev
        prev = curr
    return prev
    
def isPalindrome(head):
    if(head == None):
        return True
    slow,fast = head,head
    while(fast.next!=None and fast.next.next!=None):
        slow=slow.next
        fast=fast.next.next
    rev = reverseList(head)
    printList(rev)
    curr = head
    while(rev!=head):
        if(rev.data!= curr.data):
            return False
        curr = curr.next
        rev = rev.next
    return True
