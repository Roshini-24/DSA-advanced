# Rope Cutting Problem

def maxpeices(n,a,b,c) :
    if n == 0 :
        return 0
    if n <= -1 :
        return -1 
    res = max(maxpeices(n-a,a,b,c),
              maxpeices(n-b,a,b,c),
              maxpeices(n-c,a,b,c))
    if res == -1 :
        return -1 
    return res + 1 
    
    
n = 23
a = 11
b = 9 
c = 12
print(maxpeices(n,a,b,c))


# Subset of a given string

def sub(st,curr,idx) :
    if idx == len(st) :
        print(curr,end= " ")
        return
    sub(st,curr,idx+1)
    sub(st,curr+st[idx],idx+1)
    
    
st = "ABC"
curr = " "
idx = 0

sub(st,curr,idx)


#tower of hanoi  start aux end
def THO(n, A, B, C):
    if n == 1:
        print("Move 1 from", A, "to", C)
    else:
        THO(n - 1, A, C, B)
        print("Move", n, "from", A, "to", C)
        THO(n - 1, B,A, C)

#kill
def jos(n, k):
    if n == 1:
        return 0
    else:
        return (jos(n - 1, k) + k) % n


print(jos(5, 3))



#subset    include,not include
def countSubsetSum(arr,n,sum):
    if n==0:
        if sum==0:
            return 1 
        else:
            return 0
        
    return countSubsetSum(arr,n-1,sum) + countSubsetSum(arr,n-1,sum-arr[n-1])
        
arr = [1,2,3,5,6,7]
n=6
sum = 8 



# Printing all Permutations

def permute(s, answer):
	if (len(s) == 0):
		print(answer, end = " ")
		return
	
	for i in range(len(s)):
		ch = s[i]
		left_substr = s[0:i]
		right_substr = s[i + 1:]
		rest = left_substr + right_substr
		permute(rest, answer + ch)


answer = ""

s = "ABC"

permute(s, answer)

print(countSubsetSum(arr,n,sum))

THO(3, 'A', 'B','C' )
