#pass 2d arrays
def printMatrix(mat):
    M= len(mat)
    N= len(mat[0])
    
    for i in range(M):
        for j in range (N):
            print(mat[i][j], end=" ")
            
        print()
    

mat=[[10,20],[30,40],[50,60]]

printMatrix(mat)


#snake pattern
def printSnakePattern(matrix):
    rows = len(matrix)
    cols = len(matrix[0])

    for i in range(rows):
        if i % 2 == 0:
            for j in range(cols):
                print(matrix[i][j], end=' ')
        else:
            for j in range(cols-1, -1, -1):
                print(matrix[i][j], end=' ')

# Example usage
matrix = [[1,2,3,4],
          [5,6,7,8],
          [9,10,11,12],
          [13,14,15,16]]

printSnakePattern(matrix)


#matrix boundary
def printBoundary(mat):
    rows = len(mat)
    cols = len(mat[0])

    if rows == 1:
        # Only one row, print all elements
        print(*mat[0], end=' ')
    elif cols == 1:
        # Only one column, print all elements
        for i in range(rows):
            print(mat[i][0], end=' ')
    else:
        # Print top row
        for i in range(cols):
            print(mat[0][i], end=' ')

        # Print right column
        for i in range(1, rows):
            print(mat[i][cols-1], end=' ')

        # Print bottom row (in reverse order)
        for i in range(cols-2, -1, -1):
            print(mat[rows-1][i], end=' ')

        # Print left column (in reverse order)
        for i in range(rows-2, 0, -1):
            print(mat[i][0], end=' ')

# Example usage
mat = [[1,2,3,4],
       [5,6,7,8],
       [9,10,11,12],
       [13,14,15,16]]

printBoundary(mat)  # Output: 1 2 3 4 8 12 16 15 14 13 9 5



#transpose
def transposeMatrix(mat):
    n = len(mat)

    # Iterate over the lower triangle of the matrix
    for i in range(n):
        for j in range(i, n):
            # Swap element (i, j) with element (j, i)
            mat[i][j], mat[j][i] = mat[j][i], mat[i][j]



#rotate matrix
def rotate(mat):
    N=len(mat)
    for i in range(N):
        for j in range(i+1, N):
            mat[i][j], mat[j][i]= mat[j][i], mat[i][j]
    
    for i in range(N):
        low=0 
        high=N-1
        while(low<high):
            mat[low][i], mat[high][i]= mat[high][i], mat[low][i]
            low+=1 
            high-=1 



#spiral travel
def spiralTraversal(mat):
    # Define boundaries of the matrix
    top = 0
    bottom = len(mat) - 1
    left = 0
    right = len(mat[0]) - 1

    # Iterate through the matrix in a spiral order
    while top <= bottom and left <= right:
        # Traverse top row
        for i in range(left, right + 1):
            print(mat[top][i], end=" ")

        # Traverse right column
        for i in range(top + 1, bottom + 1):
            print(mat[i][right], end=" ")

        # Traverse bottom row
        if top < bottom:
            for i in range(right - 1, left - 1, -1):
                print(mat[bottom][i], end=" ")

        # Traverse left column
        if left < right:
            for i in range(bottom - 1, top, -1):
                print(mat[i][left], end=" ")

        # Update boundaries
        top += 1
        bottom -= 1
        left += 1
        right -= 1


#searching
def searchMatrix(mat, target):
    R=len(mat)
    C=len(mat[0])
    # Start the search at the top-right corner of the matrix
    row, col = 0, C - 1

    while row < R and col >= 0:
        if mat[row][col] == target:
            print("Found at(",row,", ",col,")")
            
            return
        elif mat[row][col] < target:
            # Target is larger, move down
            row += 1
        else:
            # Target is smaller, move left
            col -= 1

    # Target not found
    print("Not Found")


#median
def median(matrix):
    rows, cols = len(matrix), len(matrix[0])
    lo, hi = matrix[0][0], matrix[0][-1]

    # Find the minimum and maximum values in the matrix
    for i in range(rows):
        lo = min(lo, matrix[i][0])
        hi = max(hi, matrix[i][-1])

    # Calculate the target rank for the median
    target_rank = (rows * cols + 1) // 2

    while lo < hi:
        mid = (lo + hi) // 2
        count = 0

        # Count the number of elements in the matrix that are less than or equal to the midpoint
        for i in range(rows):
            count += bisect(matrix[i], mid)

        if count < target_rank:
            lo = mid + 1
        else:
            hi = mid

    return lo




