 #Function to find the maximum number of activities that can
    #be performed by a single person.
    def activitySelection(self,n,s,f):
        
        li=[]
        for i in range(n):
            k=[start[i], end[i]]
            li.append(k)
        li.sort(key=lambda x:x[1])
        z=0
        c=1
        for j in range(1,n):
            if li[j][0]>li[z][1]:
                c+=1
                z=j
        return c


#Function to find the maximum number of meetings that can
    #be performed in a meeting room.
    def maximumMeetings(self,n,start,end):
        li=[]
        for i in range(n):
            k=[start[i], end[i]]
            li.append(k)
        li.sort(key=lambda x:x[1])
        z=0
        c=1
        for j in range(1,n):
            if li[j][0]>li[z][1]:
                c+=1
                z=j
        return c



class Solution:    
    #Function to get the maximum total value in the knapsack.
    def fractionalknapsack(self, W,arr,n):
        arr.sort(key=lambda x: x.value / x.weight, reverse=True)
        
        ans = 0.0
        for item in arr:
            if W == 0:
                break
            if W < item.weight:
                ans += W * (item.value / item.weight)
                W = 0
                break
            else:
                ans += item.value
                W -= item.weight
        return ans
        # code here





    #Function to find the maximum profit and the number of jobs done.
    def JobScheduling(self,Jobs,n):
        jobsDone = maxProfit = 0
        Jobs.sort(key = lambda job: job.profit, reverse = True)
        
        maxDeadline = max(Jobs, key = lambda job: job.deadline).deadline
        slots = [False for _ in range(maxDeadline + 1)]
        
        for job in Jobs:
            for i in range(job.deadline, 0, -1):
                if slots[i] == False:
                    slots[i] = True
                    maxProfit += job.profit
                    jobsDone += 1
                    break
                
        return [jobsDone, maxProfit]
        # code here


#Function to return the largest possible number of n digits
    #with sum equal to given sum.
    def largestNum(self,N,S):
        x=''
        if S==0 and N==1:
            return 0
        else:
            for i in range(N):
                if S>=9:
                    if i==(N-1) and S>9:
                        return -1
                    S=S-9
                    x+=str(9)
                elif S==0:
                    x+=str(S)
                else:
                    x+=str(S)
                    S=S-S
        return x


#Function to return the decoded string.
def decodeHuffmanData(root, binaryString):
    res = ''
    n = len(binaryString)
    cur = root
    i = 0
    while i!=n:
        if cur.data=='$':
            if binaryString[i]=='0':
                cur = cur.left
            else:
                cur = cur.right
            i+=1
        else:
            res += cur.data
            cur = root
    res += cur.data

    return res



# Huffman Coding

import heapq

class node:
	def __init__(self, freq, symbol, left=None, right=None):

		self.freq = freq

		self.symbol = symbol

		self.left = left

		self.right = right

		self.huff = ''
		
	def __lt__(self, nxt):
		return self.freq < nxt.freq
		

def printNodes(node, val=''):
	
	newVal = val + str(node.huff)

	if(node.left):
		printNodes(node.left, newVal)
	if(node.right):
		printNodes(node.right, newVal)
	if(not node.left and not node.right):
		print(f"{node.symbol} -> {newVal}")


chars = ['a', 'b', 'c', 'd', 'e', 'f']

freq = [ 5, 9, 12, 13, 16, 45]

nodes = []

for x in range(len(chars)):
	heapq.heappush(nodes, node(freq[x], chars[x]))

while len(nodes) > 1:
	
	left = heapq.heappop(nodes)
	right = heapq.heappop(nodes)

	left.huff = 0
	right.huff = 1

	newNode = node(left.freq+right.freq, left.symbol+right.symbol, left, right)
	heapq.heappush(nodes, newNode)

printNodes(nodes[0])
