#intersection
def intersection(arr1, m , arr2, n):
    us=set()
    for i in range(m):
        us.add(arr1[i])
    res=0 
    for i in range(n):
        if arr2[i] in us:
            res+=1 
            us.remove(arr2[i])
    
    return res

    
m=7 
n=4
arr1=[10, 15, 20, 15, 30, 30, 5]
arr2=[30, 5, 30, 80]
print(intersection(arr1, m, arr2, n))


#union
  def unionSize(arr1, m, arr2, n):
    us=set()
    for i in arr1:
        us.add(i)
    for i in arr2:
        us.add(i)
        
    return len(us)

    
m=7 
n=4
arr1=[10, 15, 20, 15, 30, 30, 5]
arr2=[30, 5, 30, 80]
print(unionSize(arr1, m, arr2, n))


#common sub array
def longestCommonSpan(arr1, arr2):
    n=len(arr1)
    arr=[0]*n 
    for i in range(n):
        arr[i]=arr1[i]-arr2[i]
        mydict=dict()
        sum=0
        max_len=0
        for i in range(n):
            sum+=arr[i]
            if(sum==0):
                max_len=i+1 
            if sum in mydict:
                max_len=max(max_len, i-mydict[sum])
            else:
                mydict[sum]=i 
                
    return max_len
    

arr1=[0, 1, 0, 0, 0, 0]
arr2=[1, 0, 1, 0, 0, 1]
print(longestCommonSpan(arr1, arr2))



  #pair with given sum
  def pairWithSum(arr, x):
    us=set()
    for i in arr:
        if (x-i) in us:
            return 1 
        us.add(i)
        
    return 0

    
arr=[3, 2, 8, 15, -8]
sum=17
print(pairWithSum(arr, sum))


#zero sum
  def isZeroSum(l):
    pre_sum = 0

    h = set()

    for i in range(len(l)):
        pre_sum += l[i]
        if pre_sum == 0 or pre_sum in h:
            return True
        h.add(pre_sum)

    return False

l = [4, 3, -2, 1, 1]

print(isZeroSum(l))

#palindrome
from collections import Counter
def isPalPer(s):
    cnt=Counter(s)
    odd=0
    for freq in cnt.values():
        if freq%2!=0:
            odd=odd+1
            if odd>1:
                return False
    return True
    
s="geeksgeeks"
print(isPalPer(s))


# Subarray with Given Sum
# Efficient

def longestsubarraywithsum(arr,sum) :
    n = len(arr)
    my_dict = dict()
    pre_sum = 0
    res = 0
    
    for i in range(n) :
        pre_sum += arr[i]
        if pre_sum == sum :
            res = i+1 
        if pre_sum not in my_dict :
            my_dict[pre_sum] = i
        if pre_sum - sum in my_dict :
            res = max( res, i-my_dict[ pre_sum - sum ] )
    
    return res
    
    
arr = [8,3,1,5,-6,6,2,2]
sum = 4
print(longestsubarraywithsum(arr,sum))


def largestZeroSubarray(arr):
    n=len(arr)
    for i in range(n):
        if(arr[i]==0):
            arr[i]=-1
    mydict=dict()
    sum=0
    maxLen=0
    for i in range(n):
        sum+=arr[i]
        if(sum==0):
            maxLen=i+1 
        if sum in mydict:
            maxLen=max(maxLen, i-mydict[sum])
        else:
            mydict[sum]=i 
    
    return maxLen
    
n=7
arr=[1, 0, 1, 1, 1, 0, 0]
print(largestZeroSubarray(arr))


#subsequence
def findLongest(arr):
    s=set()
    res=0 
    for i in arr:
        s.add(i)
    for i in arr:
        if (i-1) not in s:
            curr=1 
            while(curr+i) in s:
                curr+=1 
            res=max(res, curr)
    return res 
    

arr= [ 1, 9, 3, 4, 2, 10, 13]
print(findLongest(arr))


#didtenct element in window
from collections import Counter
def printDistinct(arr, k):
    mp=Counter(arr[0:k])
    print(len(mp))
    for i in range(k, len(arr)):
        x=arr[i-k]
        mp[x]-=1 
        mp[arr[i]]+=1 
        if(mp[x]==0):
            del mp[x]
        print(len(mp))
        
        

arr= [ 10, 20, 10, 30, 40]
k=4
print(printDistinct(arr, k))


#morethan n/k
from collections import Counter

def printNbyK(arr, k):
    n=len(arr)
    c=Counter(arr)
    for x in c:
        if(c[x]> n//k):
            print(x)

    
arr= [ 10, 10, 20, 30, 20, 10, 10]
k=2
print(printNbyK(arr, k))
