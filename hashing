#intersection
def intersection(arr1, m , arr2, n):
    us=set()
    for i in range(m):
        us.add(arr1[i])
    res=0 
    for i in range(n):
        if arr2[i] in us:
            res+=1 
            us.remove(arr2[i])
    
    return res

    
m=7 
n=4
arr1=[10, 15, 20, 15, 30, 30, 5]
arr2=[30, 5, 30, 80]
print(intersection(arr1, m, arr2, n))


#union
  def unionSize(arr1, m, arr2, n):
    us=set()
    for i in arr1:
        us.add(i)
    for i in arr2:
        us.add(i)
        
    return len(us)

    
m=7 
n=4
arr1=[10, 15, 20, 15, 30, 30, 5]
arr2=[30, 5, 30, 80]
print(unionSize(arr1, m, arr2, n))


  #pair with given sum
  def pairWithSum(arr, x):
    us=set()
    for i in arr:
        if (x-i) in us:
            return 1 
        us.add(i)
        
    return 0

    
arr=[3, 2, 8, 15, -8]
sum=17
print(pairWithSum(arr, sum))


#zero sum
  def isZeroSum(l):
    pre_sum = 0

    h = set()

    for i in range(len(l)):
        pre_sum += l[i]
        if pre_sum == 0 or pre_sum in h:
            return True
        h.add(pre_sum)

    return False

l = [4, 3, -2, 1, 1]

print(isZeroSum(l))

#palindrome
from collections import Counter
def isPalPer(s):
    cnt=Counter(s)
    odd=0
    for freq in cnt.values():
        if freq%2!=0:
            odd=odd+1
            if odd>1:
                return False
    return True
    
s="geeksgeeks"
print(isPalPer(s))


# Subarray with Given Sum
# Efficient

def longestsubarraywithsum(arr,sum) :
    n = len(arr)
    my_dict = dict()
    pre_sum = 0
    res = 0
    
    for i in range(n) :
        pre_sum += arr[i]
        if pre_sum == sum :
            res = i+1 
        if pre_sum not in my_dict :
            my_dict[pre_sum] = i
        if pre_sum - sum in my_dict :
            res = max( res, i-my_dict[ pre_sum - sum ] )
    
    return res
    
    
arr = [8,3,1,5,-6,6,2,2]
sum = 4
print(longestsubarraywithsum(arr,sum))
