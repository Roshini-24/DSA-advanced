#get sum
arr=[10, 20, 30, 40, 50]
n=len(arr)
ps=[0]*n

def getSum(qs, qe):
    return ps[qe] if qs==0 else ps[qe]-ps[qs-1]
    

def update(i, new_val):
    global ps
    diff=new_val-arr[i]
    for j in range(i, n):
        ps[j]+=diff

def initialize():
    global ps
    ps[0]=arr[0]
    for i in range(1, n):
        ps[i]=ps[i-1]+arr[i]
    
initialize()
print(getSum(0, 2))
print(getSum(1, 3))
update(1, 60)
print(getSum(0, 2))
print(getSum(1, 3))



#construct segment tree
arr = [10,20,30,40]
n = len(arr)
tree = [0]*(4*n)

def buildTree(ss,se,si):
    if ss==se:
        tree[si] = arr[ss]
        return arr[ss]
    mid = (ss + se)//2
    tree[si] = buildTree(ss,mid,2*si+1) + buildTree(mid+1,se,2*si+2)
    
    return tree[si]


buildTree(0,3,0)
print(tree)


#range query
arr = [10,20,30,40]
n = len(arr)
tree = [0]*(4*n)

def buildTree(ss,se,si):
    if ss==se:
        tree[si] = arr[ss]
        return arr[ss]
    mid = (ss + se)//2
    tree[si] = buildTree(ss,mid,2*si+1) + buildTree(mid+1,se,2*si+2)
    
    return tree[si]
def getSumReq(qs,qe,ss,se,si):
    if se<qs or ss>qe:
        return 0 
    if qs<=ss and qe>=se:
        return tree[si]
    mid = (ss + se)//2
    return getSumReq(qs,qe,ss,mid,2*si+1) + getSumReq(qs,qe,mid+1,se,2*si+2)

buildTree(0,3,0)
print(getSumReq(0,2,0,3,0))


#update query
arr = [10,20,30,40]
n = len(arr)
tree = [0]*(4*n)

def buildTree(ss,se,si):
    if ss==se:
        tree[si] = arr[ss]
        return arr[ss]
    mid = (ss + se)//2
    tree[si] = buildTree(ss,mid,2*si+1) + buildTree(mid+1,se,2*si+2)
    
    return tree[si]
    
def updte(ss,se,i,si,diff):
    if i<ss or  i>se:
        return 
    tree[si]+=diff
    if se>ss:
        mid = (ss + se)//2
        updte(ss,mid,i,2*si+1,diff)
        updte(mid+1,se,i,2*si+2,diff)


buildTree(0,3,0)
updte(0,3,1,0,5)
print(tree)


bit construction
arr=[10, 20, 30, 40, 50]
n=len(arr)
bITree=[0]*(n+1)

def update(i, x):
    i=i+1 
    while(i<=n):
        bITree[i]+=x 
        i=i+(i&(-i))
        

for i in range(n):
    update(i, arr[i])
    
print(bITree)


#prefixsum bit construction
arr = [10,20,30,40,50,60,70,80,90]

BITTree = [0]*(len(arr)+1)

def addBit(BITTree , n , i ,v):
    i += 1
  
    while i <= n:
  
        BITTree[i] += v
  
        i += i & (-i)
  

def construct(arr, n):


    for i in range(n):
        addBit(BITTree, n, i, arr[i])

    
def getSum(i):
    i = i+1 
    res = 0 
    while i>0:
        res = res + BITTree[i]
        i = i -(i&(-i))
    return res


construct(arr,len(arr))
print(BITTree)
print(getSum(6))

#update query using bit
arr = [10,20,30,40,50,60,70,80,90]

BITTree = [0]*(len(arr)+1)

def addBit(BITTree , n , i ,v):
    i += 1
  
    while i <= n:
        BITTree[i] += v
        i += i & (-i)
  
# same function can be used for add as well as update
def updateBit(i,x):
    i += 1
  
    while i <= len(BITTree):
        BITTree[i] += x
        i += i & (-i)

def construct(arr, n):
    for i in range(n):
        addBit(BITTree, n, i, arr[i])

construct(arr,len(arr))
print(BITTree)
updateBit(2,10)
print(BITTree)

