#tail elimination
def hoarsePartition(arr, l, h):
    pivot = arr[l]

    i = l - 1
    j = h + 1

    while True:

        i = i + 1
        while arr[i] < pivot:
            i = i + 1

        j = j - 1
        while arr[j] > pivot:
            j = j - 1

        if i >= j:
            return j

        arr[i], arr[j] = arr[j], arr[i]


def qSort(arr, l, h):
    while l < h:
        p = hoarsePartition(arr, l, h)
        qSort(arr, l, p)
        l = p + 1


arr = [8, 4, 7, 9, 3, 10, 5]

qSort(arr, 0, 6)

print(*arr)


#kth sMALLEST ELEMNT
def partition(arr, l, r):
 
    x = arr[r]
    i = l
    for j in range(l, r):
        if (arr[j] <= x):
            arr[i], arr[j] = arr[j], arr[i]
            i += 1
    arr[i], arr[r] = arr[r], arr[i]
    return i

def kthsmallest(arr, k) :
    l = 0 
    r = len(arr) - 1 
    while l <= r :
        p = partition(arr,l,r) 
        if p == k-1 :
            return p 
                
        elif p > k-1 :
            r = p - 1 
                
        else :
            l = p + 1 
    return -1

arr = [10,4,5,8,6,26]
k = 5 

print(kthsmallest(arr, k))


# Minimum difference in an array
# Efficient Approach

def mindiff(arr) :
    res = arr[0]
    arr.sort()
    for i in range(1, len(arr)) :
        for j in range(i) :
            res = min(res,abs(arr[i]-arr[j]))
    print(res)
    
arr = [5,3,8]
mindiff(arr)


# Chocolate Distribution Problem
# Efficient Approach

def minDiff(arr,m) :
    if (m == 0 or len(arr) == 0) :
        return 0
    if (len(arr)<m) :
        return -1
    arr.sort()
    res = arr[m-1] - arr[0]
    for i in range(1, len(arr)- m+1) :
        res = min(res,abs(arr[i + m-1] - arr[i]))
    print(res)
    
arr = [7,3,1,8,9,12,56]
minDiff(arr,3)


#SORTING OF 2 TYPES
def sort(arr) :
    i,j = -1,len(arr)
    while True :
        i += 1 
        while arr[i] < 0 :
            i += 1 
        j -= 1 
        while arr[j] >= 0 :
            j -= 1 
        if i >= j :
            return
        arr[i],arr[j] = arr[j],arr[i]
        
    return arr
        
arr = [-12,18,-10,15, -1, 20, -4]
sort(arr)
print( arr )



# Sort an array with three types of elements
temp = []
def sortarr(arr) :
    temp = []
    for x in arr :
        if x == 0 :
            temp.append(x)
    for x in arr :
        if x == 1 :
            temp.append(x)
    for x in arr :
        if x == 2 :
            temp.append(x)
    for i in range(len(arr)) :
        arr[i] = temp[i]
        
    return temp
    
    
arr = [0,1,1,2,0,1]
A = sortarr(arr)
print(A)


# Merge overlapping intervals

def mergeintervals(arr) :
    arr.sort(key = lambda x : x[0])
    res = 0
    for i in range(1, len(arr)) :
        if (arr[res][1] >= arr[i][0]) :
            arr[res][1] = max(arr[res][1],arr[i][1])
        else :
            res = res + 1 
            arr[res] = arr[i]
    for i in range(res + 1) :
        print(arr[i], end= " ")
            
arr = [[5,10],[3,15],[18,30],[2,7]]
mergeintervals(arr)


# Meeting the maximum guests

def maxguests(arr,dep) :
    arr.sort()
    dep.sort()
    n = len(arr)
    i,j = 1,0
    curr, res = 1, 1 
    while(i < n and j < n) :
        if(arr[i] <= dep[j]) :
            curr += 1 
            i += 1 
        else :
            curr -= 1 
            j += 1 
        res = max(res, curr)
    print(res)
    
    
arr = [900, 600, 700]
dep = [1000, 800, 730]
maxguests(arr,dep)


# Counting Sort 
# Naive Approach

def countingsort(arr,k) :
    output = [0] * len(arr)
    count = [0] * k
    for x in arr :
        count[x] += 1
    
    for i in range(1,k) :
        count[i] += count[i - 1]
    for x in reversed(arr) :
        output[count[x] - 1] = x
        count[x] -= 1 
    for i in range(len(arr)) :
        arr[i] = output[i]
    
    print(arr)
    
arr = [1,4,4,1,0,1]
countingsort(arr,5)


# Cycle sort

def cyclesortdist(arr) :
    w = 0
    for cs in range(len(arr) - 1) :
        item = arr[cs]
        pos = cs
        for i in range(cs+1, len(arr)) :
            if arr[i] < item :
                pos = pos + 1 
        if pos == cs :
            continue
        
        while item == arr[pos]:
            pos += 1
        arr[pos], item = item, arr[pos]
        w += 1
        
        while pos != cs :
            pos = cs 
            for i in range(cs+1, len(arr)) :
                if arr[i] < item :
                    pos += 1
            while item == arr[pos]:
                pos += 1
            arr[pos], item = item, arr[pos]
            w += 1
    
    
    
arr = [20,40,30,10,50]
n = len(arr)
cyclesortdist(arr)

for i in range(0, n) :
    print(arr[i], end = ' ')


# Radix sort
def countingsort(arr,exp) :
    output = [0] * len(arr)
    count = [0] * 10
    for i in range(0, len(arr)) :
        index = (arr[i]//exp)%10
        count[index] += 1 
    for i in range(1,10) :
        count[i] += count[i - 1]
    
    i = len(arr) - 1 
    while i >= 0 :
        index = (arr[i]//exp)%10
        output[count[index]-1] = arr[i]
        count[index] -= 1
        i -= 1 
    for i in range(0, len(arr)) :
        arr[i] = output[i]
def radixsort(arr) : 
    mx = max(arr)
    exp = 1 
    while mx/exp > 0 :
        countingsort(arr,exp)
        exp *= 10

#BUCKET SORT
def bucketSort(arr, k):
    rs= max(arr)+1 
    bkt=[[] for i in range(k)]
    for x in arr:
        i=(k*x)//rs
        bkt[i].append(x)
    
    for i in range(k):
        bkt[i].sort()
    idx=0
    for i in range(k):
        for j in range(len(bkt[i])):
            arr[idx]=bkt[i][j]
            idx+=1 
            
    for i in range(len(arr)):
        print(arr[i], end=' ')
        
arr=[30, 40, 10, 80, 5, 12, 70]
k=4
bucketSort(arr, k)


