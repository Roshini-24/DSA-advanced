class TwoStacks:
    def __init__(self, n=100):
        # Size of the array
        self.size = n

        # Array to store elements
        self.arr = [0] * n

        # Top index of stack 1
        self.top1 = -1

        # Top index of stack 2
        self.top2 = n

    # Function to push an integer into stack 1
    def push1(self, x):
        # If there is space between the top of both stacks,
        # we push the element at top1+1.
        if self.top1 < self.top2 - 1:
            self.top1 += 1
            self.arr[self.top1] = x

    # Function to push an integer into stack 2
    def push2(self, x):
        # If there is space between the top of both stacks,
        # we push the element at top2-1.
        if self.top1 < self.top2 - 1:
            self.top2 -= 1
            self.arr[self.top2] = x

    # Function to remove an element from top of stack 1
    def pop1(self):
        # If top1 == -1, stack1 is empty so we return -1,
        # else we return the top element of stack1.
        if self.top1 >= 0:
            x = self.arr[self.top1]
            self.top1 -= 1
            return x
        else:
            return -1

    # Function to remove an element from top of stack 2
    def pop2(self):
        # If top2 == size of array, stack2 is empty so we return -1,
        # else we return the top element of stack2.
        if self.top2 < self.size:
            x = self.arr[self.top2]
            self.top2 += 1
            return x
        else:
            return -1



class Solution:
    def stackMiddle(self,n,stack):
        if n==1:
            return stack[n-1]
        mid = n//2
        if n%2==0:
            return stack[mid-1]
        else:
            return stack[mid]



class Solution:
    def reverseArray(self,n,arr):
        if n==1:
            return arr
        
        st=[]
        for i in range(n):
            st.append(arr[i])
        
        for i in range(n):
            arr[i] = st.pop()



 #Function to calculate the span of stockâ€™s price for all n days.
    def calculateSpan(self,a,n):
        
    # Create a stack and push index of first element to it
        st = []
        st.append(0)
        S=[0]*n
    
        # Span value of first element is always 1
        S[0] = 1
    
        # Calculate span values for rest of the elements
        for i in range(1, n):
            
            # Pop elements from stack while stack is not
            # empty and top of stack is smaller than price[i]
            while( len(st) > 0 and a[st[-1]] <= a[i]):
                st.pop()
    
            # If stack becomes empty, then price[i] is greater
            # than all elements on left of it, i.e. price[0],
            # price[1], ..price[i-1]. Else the price[i] is
            # greater than elements after top of stack
            S[i] = i + 1 if len(st) <= 0 else (i - st[-1])
    
            # Push this element to stack
            st.append(i)
        return S


#Function to push all the elements into the stack.
def _push(a,n):
    stack=[]
    for i in range(n):
        stack.append(a[i])
    return stack

    # code here


#Function to print minimum value in stack each time while popping.    
def _getMinAtPop(stack):
    l=[]
    while stack:
        
        l1=min(stack)
        l.append(l1)
        stack.pop()
        print(l1, end=" ")
            
        return arr



class Solution:
    def nextLargerElement(self,arr,n):
        st = []
        
        res = [None] * n
        for i in range(n-1,-1,-1):
            while len(st)>0 and st[-1]<=arr[i]:
                st.pop()
            res[i]=-1 if len(st)==0 else st[-1]
            st.append(arr[i])
            
        return res

def getMaxArea(self,arr):
        st = []
        res = 0
        for i in range(len(arr)):
            while st and arr[st[-1]]>= arr[i]:
                tp = st[-1]
                st.pop()
                curr_width = (i-st[-1]-1) if st else i
                res = max(res,curr_width* arr[tp])
            st.append(i)
        while st:
            tp = st[-1]
            st.pop()
            curr_width = (len(arr)- st[-1]-1) if st else len(arr)
            res = max(res,curr_width*arr[tp])
        return res




def celebrity(self, M, n):
        
        #initializing two pointers for two corners.
        a = 0
        b = n-1
        
        #we keep moving till the a<b.
        while(a<b):
            if(M[a][b] == 1):
                a += 1
            else:
                b -= 1
                
        #checking if a is actually a celebrity or not.
        for i in range (n):
            
            #if any person doesn't know a or a knows any person, we return -1.
            if((i != a) and (M[a][i]==1 or M[i][a] == 0)):
                return -1;
                
        #if we reach here a is celebrity so we return a.
        return a


def InfixtoPostfix(self, exp):
        precedence={'+':1,'-':1,'*':2,'/':2,'^':3,'(':0}
    
        st=[]
    
        postfix=''
    
        for i in exp:
    
            if i=='(':
    
                st.append(i)
    
            elif i==')':
    
                while st[-1]!='(':
    
                    postfix+=st.pop()
    
                st.pop()
    
            elif i in precedence:
    
                while st and precedence[st[-1]]>=precedence[i]:
    
                    postfix+=st.pop()
    
                st.append(i)
    
            else:
    
                postfix+=i
    
        while st:
    
            postfix+=st.pop()
    
        return postfix

