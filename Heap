#User function Template for python3
import heapq as hq
class Solution:
    #Function to return kth largest element from an array.
    def kthLargest(self,arr,n,k):
        if k <= 0 or k > n:
            return None
    
        # Create a min-heap of size k
        min_heap = arr[:k]
        heapq.heapify(min_heap)
    
        # Process the remaining elements in the array
        for num in arr[k:]:
            if num > min_heap[0]:  # Compare with the smallest element in the heap
                heapq.heappop(min_heap)
                heapq.heappush(min_heap, num)
    
        return min_heap[0]


import heapq 
class Solution:
    #Function to find the kth smallest element in the array.
    def kthSmallest(self,arr,n,k):
        if k <= 0 or k > len(arr):
            return None
    
        # Create a max-heap with the first k elements
        max_heap = [-num for num in arr[:k]]
        heapq.heapify(max_heap)
    
        # Process the remaining elements in the array
        for num in arr[k:]:
            if -num > max_heap[0]:  # Compare with the largest element in the heap
                heapq.heappop(max_heap)
                heapq.heappush(max_heap, -num)
    
        return -max_heap[0]


import heapq
class Solution:
    #Function to return k largest elements from an array.
    def kLargest(self,li,n,k):
        heap = []
        for value in li:
            #pushing the current value in Heap.
            heapq.heappush(heap, value)
            #if size of Heap becomes greater than k, we pop the element.
            if len(heap) > k:
                heapq.heappop(heap)
        
        ans = []
        
        #while heap is not empty, we store the top element in list and pop it.
        while len(heap) > 0:
            ans.append(heapq.heappop(heap))
            
        #reversing the list and returning it.
        ans.reverse()
        return ans



import heapq

class Solution:
    
    def kthLargest(self, k, arr, n):
        # initial answer list with -1 for each element
        ans = ["-1"]*len(arr)
        
        # initializing an empty heap
        heap = []
        
        # variable to keep track of index 
        i = 0 

        # iterating over each element in the array
        for x in arr :
            # if heap size is less than k, push the element into the heap
            if len(heap) < k :
                heapq.heappush(heap,x)
            
            # if current element is greater than the minimum element in heap,
            # replace the minimum element with current element
            elif x > heap[0] :
                heapq.heapreplace(heap,x)
            
            # if heap has reached the size of k, update the answer list with 
            # the minimum element in the heap
            if len(heap) >= k :
                ans[i] = str(heap[0])
            i+=1



from collections import Counter
class Solution:
    
    #Function to return the sum of frequencies of k numbers
    #with most occurrences in an array.
    def kMostFrequent(self,a,n,k) :
        # code here
        # 1st Appoach
        arr=Counter(a).most_common(n)
        p=arr
       
        summ=0
        for i in range(k):
            summ=summ+p[i][1]
        return (summ)
 return ans




class Solution:
    #Function to return the minimum cost of connecting the ropes.
    def minCost(self,arr,n) :
        min_heap=[]
        for i in arr:
            heapq.heappush(min_heap,i)
            
        heapq.heapify(min_heap)
        total_cost=0
        while len(min_heap) >= 2:
            first=heapq.heappop(min_heap)
            second=heapq.heappop(min_heap)
            total_cost=total_cost+first+second
            heapq.heappush(min_heap,first+second)
        return total_cost
        # code here



