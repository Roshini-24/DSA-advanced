import bisect 
def countSmallerRight(nums,n):
    counts = []
    done = []
    s=set()
    for num in nums[::-1]:
        idx=bisect.bisect_left(done, num)
        counts.append(idx)
        if num not in s:
            s.add(num)
            bisect.insort(done, num)
    return max(counts)



class Solution:
    res = []
    def printNearNodesUtil(self,root,l,h,res):
        
        # base case
        if root is None:
            return 
        
        #if starting range is less than data at current node, we call 
        #the function recursively for the left subtree.
        self.printNearNodesUtil(root.left,l,h,res)
        
        #if data at current node is within the range given, we store 
        #the data at current node in the output list.
        if(root.data>=l and root.data<=h):
            res.append (root.data)
        
        #if ending range is more than data at current node, we call 
        #the function recursively for the right subtree.
        self.printNearNodesUtil(root.right,l,h,res)
     
    #Function to return a list of BST elements in a given range.  
    def printNearNodes(self, root, l, h):
        
        global res
        res = []
        self.printNearNodesUtil (root, l, h, res)
        #returning the output list.
        return res




class Node:

    def __init__(self, data=0):
        self.data = data
        self.left = None
        self.right = None

#Function that constructs BST from its preorder traversal.
def post_order(pre, size) -> Node:
    #code here
    # 1st Approach
    root=Node(pre[0])

    def fun(root,n):
        if root==None:
            root=Node(n)
            return root

        if n>root.data:
            root.right=fun(root.right,n)
        if n<root.data:
            root.left=fun(root.left,n)
        return root

    for i in range(1,size):
        root=fun(root,pre[i])
    return root
    #code here



 def topView(self,root):
        ans = []
        
        # Create a dictionary to map horizontal lines to node values.
        view_map = {}
        
        # Initialize a deque (double-ended queue) to perform BFS.
        q = deque()
        
        # Add the root node to the queue with a horizontal line number of 0.
        q.append((root, 0))

        # Perform BFS to find the top view nodes.
        while q:
            x = q.popleft()
            node = x[0]
            line = x[1]
            
            # If the current line is not in the view_map, add it.
            if line not in view_map:
                view_map[line] = node.data
            
            # Add the left child with a line number decreased by 1 to the queue.
            if node.left:
                q.append((node.left, line - 1))
            
            # Add the right child with a line number increased by 1 to the queue.
            if node.right:
                q.append((node.right, line + 1))
        
        # Sort the keys of the view_map (line numbers) and append values to 'ans'.
        for val in sorted(view_map.keys()):
            ans.append(view_map[val])
        
        # Return the list of top view nodes.
        return ans
        # code here



def LCA(root, n1, n2):
    if(root==None):
        return None
    curr=root.data
    if(curr>n1 and curr>n2):
        return LCA(root.left,n1,n2)
    if(curr<n1 and  curr<n2):
        return LCA(root.right,n1,n2)
    return root
    
def new(root,p,q):    
    if root is None:
        return None
    
        # If either n1 or n2 matches with root's key, report
        # the presence by returning root (Note that if a key is
        # ancestor of other, then the ancestor key becomes LCA
    if root.data == n1 or root.data == n2:
            return root
    
    if n1<root.data and n2<root.data:    # Look for keys in left and right subtrees
        left_lca = LCA(root.left, n1, n2)
    elif n1>root.data and n2>root.data:    
        right_lca = LCA(root.right, n1, n2)
    else:
        left_lca = LCA(root.left, n1, n2)
        right_lca = LCA(root.right, n1, n2)
    
        # If both of the above calls return Non-NULL, then one key
        # is present in once subtree and other is present in other,
        # So this node is the LCA
    if left_lca and right_lca:
        return root
    
        # Otherwise check if left subtree or right subtree is LCA
    return left_lca if left_lca is not None else right_lca


  def merge(self, root1, root2):
        res=[]
        ##go(root2,res)
        
        
        
        def go(root,res):
            if root==None:
                return None
            res.append(root.data)
            go(root.left,res)
            go(root.right,res)
            
            
        go(root1,res)
        go(root2,res)
        res.sort()
        return res




#Function to construct the BST from its given level order traversal.
def constructBst(a,n):
    
    #base case
    if n>0:
        root=Node(a[0])
    else:
        return None
        
    #iterating over array and inserting elements in BST.
    for i in range(1,n):
        insert(root,a,n,i)
        
    return root

#Function to insert a node.
def insert(root,a,n,i):
    
    #if data at current node is more than a[i], and left child exists, we
    #call the function recursively for left child.
    if root.data>a[i]:
        if root.left:
            insert(root.left,a,n,i)
        else:
            root.left=Node(a[i])
            
    #if data at current node is less than a[i], and right child exists, we
    #call the function recursively for right child.
    if root.data<a[i]:
        if root.right:
            insert(root.right,a,n,i)
        else:
            root.right=Node(a[i])


  #Function to check whether a Binary Tree is BST or not.
    def isBST(self, root):
        def ok(node,left=-float('inf'),right=float('inf')):
            if not left<node.data<right:
                return False
            leftok=True if not node.left else ok(node.left,left,node.data)
            rightok=True if not node.right else ok(node.right,node.data,right)
            return leftok and rightok
        return ok(root)


#Function to find the least absolute difference between any node
    #value of the BST and the given integer.
    def inn(self,root,arr):
        if root:
            self.inn(root.left,arr)
            arr.append(root.data)
            self.inn(root.right,arr)
        return arr
    def minDiff(self,root, K):
        # code here
        arr=[]
        arr=self.inn(root,arr)
        x=[]
        for i in arr:
            x.append(abs(i-K))
        x.sort()
        return x[0]


def verticalOrder(self, root): 
        #Your code here
        if root is None: return []
        q=[[root,0]]
        ans,level=[],{}
        while len(q)!=0:
            rn,hd=q.pop(0)
            if hd in level:
                level[hd].append(rn.data)
            else:
                level[hd]=[rn.data]
                
            if rn.left is not None:
                q.append([rn.left,hd-1])
                
            if rn.right is not None:
                q.append([rn.right,hd+1])
                
        
        for i in sorted(level.keys()):
            ans.extend(level[i])
    
        return ans


#Function to fix a given BST where two nodes are swapped.  
class Solution:
    def correctBST(self, root):
    # code here
        l1=[]
        inorder(root,l1)
        l2=[i.data for i in l1]
        l2.sort()
        p,q=None,None
        for i in range(len(l1)):
            if l2[i]!=l1[i].data:
                if not p:
                    p=l1[i]
                else:
                    q=l1[i]
        p.data,q.data=q.data,p.data
        return root
def inorder(root,res):
    if not root:
        return
    inorder(root.left,res)
    res.append(root)
    inorder(root.right,res)





#Function to find the nodes that are common in both BST.
    def traverseAndCollect(self, node, tree_type):
        if not node:
            return
       
        self.traverseAndCollect(node.left, tree_type)
       
        if not tree_type:
            self.temp1.add(node.data)
        else:
            if node.data in self.temp1:
                self.res.append(node.data)
       
        self.traverseAndCollect(node.right, tree_type)
   
    def findCommon(self, root1, root2):
        self.temp1, self.res = set(), []
       
        self.traverseAndCollect(root1, 0)
        self.traverseAndCollect(root2, 1)
       
        return self.res



#Function to check if any pair exists in BST whose sum is equal to given value.
def findPair(root, X):
    s = set()
    
    def ispairsum(root, X, s):
        if root == None:
            return False
        if ispairsum(root.left, X, s):
            return True
        if X - root.key in s:
            return True
        else:
            s.add(root.key)
        return ispairsum(root.right, X, s)
    
    return ispairsum(root, X, s)


from collections import deque
class Solution:
    def bottomView(self, root):
        if (root == None):
    		return
    	ans=[]
    	hd = 0
    	
    	min_hd, max_hd = 0, 0
    	
    	hd_dict = dict()
    
    	q = deque()
    
    	root.hd = hd
    	q.append(root)
    
    	while q:
    		curr_node = q.popleft()
    		
    		hd = curr_node.hd
    		
    		min_hd = min(min_hd, hd)
    		max_hd = max(max_hd, hd)
    
    		hd_dict[hd] = curr_node.data
    
    		if curr_node.left:
    			curr_node.left.hd = hd - 1
    			q.append(curr_node.left)
    
    		if curr_node.right:
    			curr_node.right.hd = hd + 1
    			q.append(curr_node.right)
    
    	for i in range(min_hd, max_hd+1):
    		ans.append(hd_dict[i])
    	return ans

#Function to count number of nodes in BST that lie in the given range.
class Solution:
    def getCount(self,root,l,h):
        c=[0]
        self.printNearNodesUtil(root, l, h, c)
        #returning the output list.
        return c[0]


    def printNearNodesUtil(self,root,l,h,res):
        
        # base case
        if root is None:
            return 
        
        #if starting range is less than data at current node, we call 
        #the function recursively for the left subtree.
        self.printNearNodesUtil(root.left,l,h,res)
        
        #if data at current node is within the range given, we store 
        #the data at current node in the output list.
        if(root.data>=l and root.data<=h):
            res[0]+=1
        
        #if ending range is more than data at current node, we call 
        #the function recursively for the right subtree.
        self.printNearNodesUtil(root.right,l,h,res)
