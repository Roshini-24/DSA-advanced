#left rotate
def reverse(l,b,e):
    while b<e:
        l[b],l[e]=l[e],l[b]
        b=b+1
        e=e-1


def leftRotate(l,d):
    n=len(l)
    reverse(l,0,d-1)
    reverse(l,d,n-1)
    reverse(l,0,n-1)


l=[10,20,30,40,50]
d=3
leftRotate(l, d)
print(l)

#rotated and sorted
class Solution:
    #Function to check if array is sorted in increasing order and rotated.
    def II (self,arr, n):
        i = 0
        #We use a loop to check whether elements are in increasing order and 
    	#stop at position where we find a smaller number than previous one.
        while (i < n-1 and arr[i] <= arr[i+1]):
            i += 1
        #If we reach the end of the array, we return false.
        if i == n-1:
            return False
            
        i += 1
        #Now we check whether all remaining elements are in increasing order.
        while (i < n-1 and arr[i] <= arr[i+1]):
            i += 1
            
        #If we reach the end and the last element is smaller than or equal to
        #first element we return true else we return false.
        if (i == n-1 and arr[n-1] <= arr[0]):
            return True
        else:
            return False
            
    #Function to check if array is sorted in decreasing order and rotated.
    def DD (self,arr, n):
        i = 0 
        #We use a loop to check whether elements are in decreasing order and 
        #stop at position where we find a smaller number than next one.
        while (i < n-1 and arr[i] >= arr[i+1]):
            i += 1
        #If we reach the end of the array, we return false.
        if i == n-1:
            return False
            
        i += 1
        #Now we check whether all remaining elements are in decreasing order.
        while (i < n-1 and arr[i] >= arr[i+1]):
            i += 1
        
        #If we reach the end and the last element is larger than or equal to 
        #first element we return true else we return false.
        if (i == n-1 and arr[n-1] >= arr[0]):
            return True
        else:
            return False
            
    #Function to check if array is sorted and rotated.
    def checkRotatedAndSorted (self,arr, n):
        
        #returning true if any of the two function gives true.
        if self.II (arr,n) == True:
            return True
            
        if self.DD (arr,n) == True:
            return True
            
        return False


#max difference
def maxdiff(arr,n) :
    res = arr[1] - arr[0]
    for i in range(0, n-1) :
        for j in range(i+1, n) :
            res = max(res,arr[j]-arr[i])
            
    return res
    
arr = [2,3,10,6,4,8,1]
n = len(arr)
print(maxdiff(arr,n))


#buy sell
def maxProfit(price, n):
    profit=0
    for i in range(1, n):
        if(price[i]>price[i-1]):
            profit+=price[i]-price[i-1]
    return profit

n=5
price=[1, 5, 3, 8, 12]
print(maxProfit(price, n))

#trap rain water
def getWater(arr, n):
    res=0
    lmax=[0]*n
    rmax=[0]*n 
    
    lmax[0]= arr[0]
    for i in range(1, n):
        lmax[i]= max(arr[i], lmax[i-1])
    
    rmax[n-1]=arr[n-1]
    for i in range(n-2, -1, -1):
        rmax[i]= max(arr[i], rmax[i+1])
        
    for i in range(1, n-1):
        res=res+(min(lmax[i], rmax[i])-arr[i])
    return res

n=5
arr=[3, 1, 0, 3, 4]
print(getWater(arr, n))


#max sub array
def maxSum(arr, n):
    res=arr[0]
    maxEnding=arr[0]
    for i in range(1, n):
        maxEnding= max(maxEnding+arr[i], arr[i])
        res=max(maxEnding, res)
    return res
    
n=5
arr=[1, -2, 3, -1, 2]
print(maxSum(arr, n))


#sliding window
def maxsum(arr,k) :
    curr = 0
    for i in range(k) :
        curr += arr[i]
    res = curr
    for i in range(k,len(arr)) :
        curr = curr + arr[i] - arr[i-k]
        res = max(res,curr)
    
    return res
    
    
arr = [1,8,30,-5,20,7]
k = 4
print(maxsum(arr,k))


#longest even odd
def maxEvenOdd(arr, n):
    res=1 
    curr=1 
    for i in range(1, n):
        if((arr[i]%2==0 and arr[i-1]%2!=0) or (arr[i]%2!=0 and arr[i-1]%2==0)):
            curr+=1
            res=max(res, curr)
        else:
            curr=1 
            
    return res
    
n=6
arr=[5, 10, 20, 6, 3, 8]
print(maxEvenOdd(arr, n))


#circular subarry
def normalMaxSum(arr, n):
    res=arr[0]
    maxEnding=arr[0]
    for i in range(1, n):
        maxEnding=max(maxEnding+arr[i], arr[i])
        res=max(maxEnding, res)
    return res 


def overallMaxSum(arr, n):
    max_normal=normalMaxSum(arr, n)
    if(max_normal<0):
        return max_normal
    
    arr_sum=0
    for i in range(0, n):
        arr_sum+=arr[i]
        arr[i]=-arr[i]
    max_circular=arr_sum+normalMaxSum(arr, n)
    
    return max(max_circular, max_normal)
    
        
    
n=4
arr=[5, -2, 3, 4]
print(overallMaxSum(arr, n))



#majority element
def findMajority(arr, n):
    res=0
    count=1 
    for i in range(1, n):
        if(arr[res]==arr[i]):
            count+=1 
        else:
            count-=1 
        if(count==0):
            res=i 
            count=1 
    
    
    count=0
    for i in range(0, n):
        if(arr[res]==arr[i]):
            count+=1 
    if(count<=n//2):
        res=-1 
    
    return res
    
n=7
arr=[8, 8, 6, 6, 6, 4, 6]
print(findMajority(arr, n))


#minimum consecutive flips
def printGroups(arr, n):
    for i in range(1, n):
        if(arr[i]!=arr[i-1]):
            if(arr[i]!=arr[0]):
                print('From', i, 'to', end=' ')
            else:
                print(i-1)
    if(arr[n-1]!=arr[0]):
        print(n-1)
    
n=9
arr=[0, 0, 1, 1, 0, 0, 1, 1, 0]
print(printGroups(arr, n))


#subarray with given sum
def issubsum(arr,sum) :
    s, curr = 0, 0
    for i in range(len(arr)) :
        curr += arr[i]
        while (curr > sum) :
            curr -= arr[s]
            s += 1 
        if (curr == sum) :
            return True
    return False
    
arr = [4, 8, 12, 5]
sum = 17

print(issubsum(arr, sum))


#prefix sum
def getSum(l, r):
    if(l==0):
        return pSum[r]
    else:
        return pSum[r]-pSum[l-1]

arr=[2, 8, 3, 9, 6, 5, 4]
n=len(arr)
pSum=[None]*n 
pSum[0]=arr[0]
for i in range(1, n):
    pSum[i]=pSum[i-1]+arr[i]

print(getSum(2, 6))


#equlibrium point
def ePoint(arr):
    rs=sum(arr)
    ls=0
    for i in range(len(arr)):
        rs-=arr[i]
        if(ls==rs):
            return True
        ls+=arr[i]
    return False
    
arr=[3, 4, 8, -9, 9, 7]
print(ePoint(arr))


#rearrange in extra space
class Solution:
    #Function to rearrange an array so that arr[i] becomes arr[arr[i]]
    #with O(1) extra space.
    def arrange(self,arr, n): 
        for i in range(n):
            arr[i]+=n*((arr[arr[i]])%n)
        for i in range(n):
            arr[i]//=n


#choclates
class Solution {
    solve(a, b) {
        // Swap a and b if a is greater than b
        if(a>b){
            [a, b] = [b, a];
        }
        let k=b-a; // Calculate the difference between a and b
        let d= 1 +Math.sqrt(5); // Calculate the value of phi
        d/=2; // Divide phi by 2
        d*=k; // Multiply phi/2 with the difference between a and b
        let temp=parseInt(d); // Convert d into an integer
        // Check if temp is equal to a
        if(temp===a){
            // If temp is equal to a, return false
            return false;
        }
        // Otherwise, return true
        return true;
    }
}





