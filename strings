#pattern search
from collections import Counter

def printNbyK(arr, k):
    n=len(arr)
    c=Counter(arr)
    for x in c:
        if(c[x]> n//k):
            print(x)

    
arr= [ 10, 10, 20, 30, 20, 10, 10]
k=2
print(printNbyK(arr, k))


#Function to count the number of substrings that start and end with 1.
    def binarySubstring(self,n,s):
        count = 0
        for i in range(n):
            if  s[i]  == '1':
                count +=1
                
        return count *(count-1)//2


#Function to locate the occurrence of the string x in the string s.
def strstr(s,x):
    pos=-1
    pos = s.find(x)
    
    return pos


#Function to check if the given pattern exists in the given string or not.
    def search(self,pat,txt):
        m = len(pat)
        n = len(txt) 
        for i in range(n-m+1) :
            j = 0
            while j < m :
                if pat[j] != txt[i + j] :
                    break
                j = j + 1 
            if j == m :
                return True
        return False


#Function to check if two strings are isomorphic.
    def areIsomorphic(self,str1,str2):
        if len(str1) != len(str2):
            return False

    # Create dictionaries to store the character mappings for both strings.
        char_map_str1 = {}
        char_map_str2 = {}
    
        for i in range(len(str1)):
            char1 = str1[i]
            char2 = str2[i]
    
            # Check if the character in str1 is already mapped to a different character in str2.
            if char1 in char_map_str1:
                if char_map_str1[char1] != char2:
                    return False
            else:
                char_map_str1[char1] = char2
    
            # Check if the character in str2 is already mapped to a different character in str1.
            if char2 in char_map_str2:
                if char_map_str2[char2] != char1:
                    return False
            else:
                char_map_str2[char2] = char1
    
        return True


#Function to check if a string can be obtained by rotating
    #another string by exactly 2 places.
    def isRotated(self,str1,str2):
        if len(str1)!=len(str2):
            return False
        n=len(str1)
        l1=str1[2:n]+str1[0:2]
        l2=str1[n-2:n]+str1[0:n-2]
        
        if l1==str2 or l2==str2:
            return True
        else:
            return False

#Function to find the maximum occurring character in a string.
    def getMaxOccurringChar(self,s):
        #code here
        l=list(s)
        l1=[]
        l2=[]
        d=Counter(l)
        for i in d.values():
            l1.append(i)
        m=max(l1)
        for i in d:
            if(d[i]==m):
                l2.append(i)
        l2.sort()
        return l2[0]


#Function to find the first non-repeating character in a string.
    def nonrepeatingCharacter(self,s):
        
        #using hash table to store count of each character.
        for i in s:
            if(s.count(i)==1):
                return i
        return "$"


#Function to reverse words in a given string.
    def reverseWords(self,s):
        result = ""
        words = []
        curr_word = ""
        
        #initially reversing individual words of the given string one by one.
        for i in range(len(s)):
            
            #if '.' is encountered, we store the word in list.
            if(s[i] == '.'):
                words.append(curr_word)
                curr_word = ""
                
            #else adding the characters in current word in such
            #a way that original words get reversed.
            else:
                curr_word += s[i]
        
        #storing the last remaining word in list.
        words.append(curr_word)
        
        #now reversing the whole modified string by adding all 
        #the elements of list in a single string in reverse order.
        for i in range(len(words) - 1, -1, -1):
            result += words[i]
            if(i):
                result += "."
    
        #returning the result.
        return result


#Function to remove common characters and concatenate two strings.
    def concatenatedString(self,s1,s2):
        l1=[]
        for i in s1:
            if i not in s2:
                l1.append(i)
        for i in s2:
            if i not in s1:
                l1.append(i)
        if(len(l1)==0):
            return -1
        else:
            return "".join(l1)



def areRotations(self,s1,s2):
        #code here
        if len(s1)!=len(s2):
            return False
        s3 = s1+s1
        if s2 in s3:
            return True
        return False


 #Function to find the smallest window in the string s consisting
    #of all the characters of string p.
    def smallestWindow(self, s, p):
        
        #if length of string p is greater than string s then we return -1.
    	if(len(p)>len(s)):
    		return -1
    		
    	#using hash tables to store the count of characters in strings.
    	shash=[0 for i in range(26)]
    	phash=[0 for i in range(26)]
    
        #storing the count of characters in string p in hash table.
    	for char in p:
    		phash[ord(char)-ord('a')]+=1
    
    	counter=0
    	begin=0
    	startindex=-1
    	length=0
    	minlength=1e10
    
    	for i in range(len(s)):
    	    
    	    #storing the count of characters in string s in hash table.
    		shash[ord(s[i])-ord('a')]+=1
            
            #if count of current character in string s is equal to or less 
            #than in string p, we increment the counter.
    		if(phash[ord(s[i])-ord('a')] !=0 and
    		shash[ord(s[i])-ord('a')]<=phash[ord(s[i])-ord('a')]):
    		    
    			counter+=1
    
            #if all the characters are matched
    		if(counter==len(p)):
    		    
    		    #we try to minimize the window.
    			while(shash[ord(s[begin])-ord('a')]>phash[ord(s[begin])-ord('a')] or phash[ord(s[begin])-ord('a')]==0):
    				if(shash[ord(s[begin])-ord('a')]>phash[ord(s[begin])-ord('a')]):
    					shash[ord(s[begin])-ord('a')]-=1
    					begin+=1
    					
    			#updating window size.
    			length=i-begin+1
    
    			if(length<minlength):
    			    
    			    #if new minimum sub-string is found, we store value
                    #of its starting index for new found window.
    				startindex=begin
    				minlength=length
    
        #returning the smallest window or -1 if no such window is present.
    	if(startindex==-1):
    		return "-1"
    	else:
    		return s[startindex:startindex+minlength]




#Function to find matching decimal representation of a string as on the keypad.
def printNumber(s,n):
    
    d={'a':2,'b':2,'c':2,'d':3,'e':3,'f':3,'g':4,'h':4,'i':4,'j':5,'k':5,'l':5,
    'm':6,'n':6,'o':6,'p':7,'q':7,'r':7,'s':7,'t':8,'u':8,'v':8,'w':9,'x':9,
    'y':9,'z':9}
    
    ns=''
    
    #iterating over the string.
    for e in s:
        
        #concatenating the number on the keypad which has the 
        #current character to the answer.
        ns+=str(d[e])
        
    #returning the answer.
    return (ns)


#Function to find nth number made of only prime digits.
    def nthprimedigitsnumber(self,N):
        primes = [2, 3, 5, 7]  # List of prime digits
        result = []
    
        while N > 0:
            # Find the next digit by taking the remainder of N with respect to 4.
            # This will give us the index of the prime digit to use.
            digit = primes[(N - 1) % 4]
            result.append(digit)
            
            # Update N to move to the next position in the number.
            N = (N - 1) // 4
    
        # Reverse the list to get the number in the correct order.
        result.reverse()
        
        return int("".join(map(str, result)))




def isIsogram(self,s):
        if len(set(s))==len(s):
            return True
        return False

class Solution:
    def printMinIndexChar(self, S, patt):
		char_index = {}  # Dictionary to store the indexes of characters in 'patt'

    # Initialize the dictionary with maximum index values
        for char in patt:
            char_index[char] = float('inf')
    
        for i in range(len(S)):
            char = S[i]
            if char in char_index:
                char_index[char] = min(char_index[char], i)
    
        min_index = float('inf')
        min_char = '$'
    
        for char in patt:
            if char_index[char] < min_index:
                min_index = char_index[char]
                min_char = char
    
        return min_charclass Solution:
    def printMinIndexChar(self, S, patt):
		char_index = {}  # Dictionary to store the indexes of characters in 'patt'

    # Initialize the dictionary with maximum index values
        for char in patt:
            char_index[char] = float('inf')
    
        for i in range(len(S)):
            char = S[i]
            if char in char_index:
                char_index[char] = min(char_index[char], i)
    
        min_index = float('inf')
        min_char = '$'
    
        for char in patt:
            if char_index[char] < min_index:
                min_index = char_index[char]
                min_char = char
    
        return min_char



 #Function to find repeated character whose first appearance is leftmost.
    def repeatingCharacter(self,S):
        char_count = {}  # Dictionary to store character frequencies and their first appearances
    
        for i in range(len(S)):
            if S[i] in char_count:
                char_count[S[i]] += 1
            else:
                char_count[S[i]] = 1
    
        # Iterate through the string again to find the first leftmost repeated character
        for i in range(len(S)):
            if char_count[S[i]] > 1:
                return i
    
        # If no repeated character is found, return None or any other appropriate value
        return -1


#Function to calculate sum of all numbers present in a string.
    def findSum(self,s):
        temp = "0"
        Sum = 0
      
        #iterating over the string.
        for ch in s:
      
            #if current character is digit, we store it in a temporary string.
            if (ch.isdigit()):
                temp += ch
      
            else:
                #incrementing final sum by number stored in temporary string.
                Sum += int(temp)
                #making the temporary string empty again.
                temp = "0"
      
        #adding any number if it's present in temporary
    	#string to final sum and returning it.
        return Sum + int(temp)
