#pattern search
from collections import Counter

def printNbyK(arr, k):
    n=len(arr)
    c=Counter(arr)
    for x in c:
        if(c[x]> n//k):
            print(x)

    
arr= [ 10, 10, 20, 30, 20, 10, 10]
k=2
print(printNbyK(arr, k))


#Function to count the number of substrings that start and end with 1.
    def binarySubstring(self,n,s):
        count = 0
        for i in range(n):
            if  s[i]  == '1':
                count +=1
                
        return count *(count-1)//2


#Function to locate the occurrence of the string x in the string s.
def strstr(s,x):
    pos=-1
    pos = s.find(x)
    
    return pos


#Function to check if the given pattern exists in the given string or not.
    def search(self,pat,txt):
        m = len(pat)
        n = len(txt) 
        for i in range(n-m+1) :
            j = 0
            while j < m :
                if pat[j] != txt[i + j] :
                    break
                j = j + 1 
            if j == m :
                return True
        return False


#Function to check if two strings are isomorphic.
    def areIsomorphic(self,str1,str2):
        if len(str1) != len(str2):
            return False

    # Create dictionaries to store the character mappings for both strings.
        char_map_str1 = {}
        char_map_str2 = {}
    
        for i in range(len(str1)):
            char1 = str1[i]
            char2 = str2[i]
    
            # Check if the character in str1 is already mapped to a different character in str2.
            if char1 in char_map_str1:
                if char_map_str1[char1] != char2:
                    return False
            else:
                char_map_str1[char1] = char2
    
            # Check if the character in str2 is already mapped to a different character in str1.
            if char2 in char_map_str2:
                if char_map_str2[char2] != char1:
                    return False
            else:
                char_map_str2[char2] = char1
    
        return True


#Function to check if a string can be obtained by rotating
    #another string by exactly 2 places.
    def isRotated(self,str1,str2):
        if len(str1)!=len(str2):
            return False
        n=len(str1)
        l1=str1[2:n]+str1[0:2]
        l2=str1[n-2:n]+str1[0:n-2]
        
        if l1==str2 or l2==str2:
            return True
        else:
            return False

#Function to find the maximum occurring character in a string.
    def getMaxOccurringChar(self,s):
        #code here
        l=list(s)
        l1=[]
        l2=[]
        d=Counter(l)
        for i in d.values():
            l1.append(i)
        m=max(l1)
        for i in d:
            if(d[i]==m):
                l2.append(i)
        l2.sort()
        return l2[0]


#Function to find the first non-repeating character in a string.
    def nonrepeatingCharacter(self,s):
        
        #using hash table to store count of each character.
        for i in s:
            if(s.count(i)==1):
                return i
        return "$"


#Function to reverse words in a given string.
    def reverseWords(self,s):
        result = ""
        words = []
        curr_word = ""
        
        #initially reversing individual words of the given string one by one.
        for i in range(len(s)):
            
            #if '.' is encountered, we store the word in list.
            if(s[i] == '.'):
                words.append(curr_word)
                curr_word = ""
                
            #else adding the characters in current word in such
            #a way that original words get reversed.
            else:
                curr_word += s[i]
        
        #storing the last remaining word in list.
        words.append(curr_word)
        
        #now reversing the whole modified string by adding all 
        #the elements of list in a single string in reverse order.
        for i in range(len(words) - 1, -1, -1):
            result += words[i]
            if(i):
                result += "."
    
        #returning the result.
        return result
