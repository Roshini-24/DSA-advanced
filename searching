# an element in an array of infinite size

def binary_search(arr,l,r,x):

	if r >= l:
		mid = l+(r-l)//2

		if arr[mid] == x:
			return mid

		if arr[mid] > x:
			return binary_search(arr,l,mid-1,x)

		return binary_search(arr,mid+1,r,x)

	return -1

def findPos(a, key):

	l, h, val = 0, 1, arr[0]

	while val < key:
		l = h		 
		h = 2*h		 
		val = arr[h]	

	return binary_search(a, l, h, key)

arr = [3, 5, 7, 9, 10, 90, 100, 130, 140, 160, 170]
ans = findPos(arr,10)
if ans == -1:
	print ("Element not found")
else:
	print("Element found at index",ans)



 #search in sorted and rotated array
 def search(arr, n, x):
    low=0 
    high=n-1
    while(low<=high):
        mid=(low+high)//2 
        if(arr[mid]==x):
            return mid
        
        if(arr[low]<=arr[mid]):
            if(arr[low]<=x<=arr[mid]):
                high=mid-1
            else:
                low=mid+1 
        else:
            if(arr[mid]<=x<=arr[high]):
                low=mid+1 
            else:
                high=mid-1 
    return -1 

n=6
arr=[100, 200, 400, 1000, 10, 20]
x=10
print(search(arr, n, x))


# A Python program to find a peak element

def findPeak(arr, n):

	l = 0
	r = n-1
	
	while(l <= r):

		mid = (l + r) // 2

		if((mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == n - 1 or arr[mid + 1] <= arr[mid])):
			break

		if(mid > 0 and arr[mid - 1] > arr[mid]):
			r = mid - 1

		else:
			l = mid + 1

	return mid


arr = [1, 3, 20, 4, 1, 0]
n = len(arr)
print(f"Index of a peak point is {findPeak(arr, n)}")


#count of occurnce
def firstIndex(l, x):
    low = 0

    high = len(l) - 1

    while low <= high:

        mid = (low + high) // 2

        if l[mid] > x:
            high = mid - 1
        elif l[mid] < x:
            low = mid + 1

        else:
            if mid == 0 or l[mid - 1] != l[mid]:
                return mid
            else:
                high = mid - 1
    return -1


def lastOccur(l, x):
    low = 0
    high = len(l) - 1

    while low <= high:

        mid = (low + high) // 2

        if l[mid] < x:
            low = mid + 1

        elif l[mid] > x:
            high = mid - 1

        else:

            if mid == len(l) - 1 or l[mid] != l[mid + 1]:
                return mid
            else:
                low = mid + 1
    return -1


def countOccurr(l, x):
    first = firstIndex(l, x)

    if first == -1:
        return 0

    else:
        return lastOccur(l, x) - first + 1


# Two Pointers Approach

def inpair(arr,x) :
    i = 0
    j = len(arr) - 1 
    while i < j :
        if arr[i] + arr[j] == x :
            return True
        elif arr[i] + arr[j] < x :
            i += 1 
        else :
            j -= 1 
    return False
    
    
arr = [2,5,8,12,30]
x = 17 
print(inpair(arr,x))



# Median of Two Sorted Arrays

def getmid(a1,a2) :
    n1,n2 = len(a1),len(a2) 
    b1,e1 = 0,n1
    while(b1 <= e1) :
        x = (b1 + e1) // 2 
        y = ((n1 + n2 + 1)//2 - x)
        mnr1 = float('inf') if x == n1 else a1[x]
        mxl1 = float('-inf') if x == 0 else a1[x-1]
        mnr2 = a2[y]
        mxl2 = a2[y - 1]
        if mxl1 <= mnr2 and mxl2 <= mnr1 :
            if (n1+n2) % 2 == 0 :
                return(max(mxl1,mxl2) + min(mnr1,mnr2))/2 
            else :
                return max(mxl1,mxl2)
        elif mxl1 > mnr2 :
            e1 = x - 1 
        else :
            b1 = x + 1 
            
            
a1 = [18,20,30]
a2 = [5,15,25,35,45]
print(getmid(a1,a2))




#Super Naive
def repeat(arr, n):
    slow=arr[0]
    fast=arr[0]
    slow=arr[slow]
    fast=arr[arr[fast]]
    while(slow!=fast):
        slow=arr[slow]
        fast=arr[arr[fast]]
    slow=arr[0]
    while(slow!=fast):
        slow=arr[slow]
        fast=arr[fast]
    return slow

  
n=8             
arr=[1, 3, 2, 4, 6, 5, 7, 3]
print(repeat(arr, n))



# Allocate Minimum Pages (Naive Method)


def minpages(arr,n,k) :
    if (k == 1) :
        return sum(arr[0:n])
    if (n == 1) :
        return arr[0]
    res = float('inf')
    for i in range(1,n) :
        res = min(res,max(minpages(arr,i,k-1),sum(arr[i:n])))
    return res
    
    
arr = [10,5,20]
n = len(arr)
k = 2 


# Allocate Minimum pages (Binary Search)

def isfeasible(arr,k,ans) :
    req,s = 1,0
    for i in range(len(arr)) :
        if (s + arr[i]) > ans :
            req += 1 
            s = arr[i]
        else :
            s += arr[i]
    return (req <= k)
    
def minpages(arr,k) :
    n = len(arr)
    s = sum(arr)
    mx = max(arr)
    low,high = mx,s
    res = 0 
    while low <= high :
        mid = (low + high) // 2
        if (isfeasible(arr,k,mid)) :
            res = mid
            high = mid - 1 
        else :
            low = mid + 1 
    return res
print(minpages(arr,n,k))
